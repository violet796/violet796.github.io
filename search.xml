<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Node.js 与 JavaScript：从浏览器走向全栈的关键一步</title>
      <link href="/2025/08/12/node.js-yu-javascript-cong-liu-lan-qi-zou-xiang-quan-zhan-de-guan-jian-yi-bu/"/>
      <url>/2025/08/12/node.js-yu-javascript-cong-liu-lan-qi-zou-xiang-quan-zhan-de-guan-jian-yi-bu/</url>
      
        <content type="html"><![CDATA[<p>在最初的互联网时代，JavaScript 只是浏览器里的“小角色”，负责让网页动起来、能互动。然而，随着 Web 应用的复杂度不断提高，前后端分属两种语言的开发模式变得低效而割裂。Node.js 的诞生，让 JavaScript 从浏览器的前端脚本摇身一变，成为可以同时驾驭前端与后端的“全栈语言”。本篇博客将带梳理 JavaScript 与 Node.js 的关系，以及它们如何共同推动现代 Web 开发的演变。</p><h2 id="JavaScript的诞生"><a href="#JavaScript的诞生" class="headerlink" title="JavaScript的诞生"></a>JavaScript的诞生</h2><p>最早的浏览器页面由 HTML 和 CSS 两种文件构成。其中，HTML 负责描述页面的内容，如：“今天的天气”，“文章的标题”等。CSS 则负责规定这些页面内容该以什么样的形式展示，如：“标题的位置”，“标题的大小”。但是这样写出来的 HTML 页面是静态的、不可交互的，页面必须在每次对文件修改后刷新才能显示成最新的样子。为了使浏览器变得动态、可交互，1995 年，JavaScript 作为一种全新的语言诞生了。</p><h2 id="浏览器页面语言的“分工”"><a href="#浏览器页面语言的“分工”" class="headerlink" title="浏览器页面语言的“分工”"></a>浏览器页面语言的“分工”</h2><p>哪怕到 2025 年的今天，浏览器页面的构成也依然是“HTML + CSS + JavaScript”，这三种语言有着不同的分工，具体如下。</p><ul><li><strong>HTML</strong>: 定义页面内容的<strong>结构与语义</strong>（如标题、段落、图片等元素的层级关系）</li><li><strong>CSS</strong>: 控制页面内容的<strong>视觉呈现</strong>（布局、颜色、动画等样式）</li><li><strong>JavaScript</strong>: 实现页面的<strong>动态行为与交互逻辑</strong>（数据更新、事件响应等）</li></ul><p><img src="https://youke1.picui.cn/s1/2025/08/12/689aaa37eff72.png" alt="实例图片"></p><p>以上图为例，在 HTML 中定义了这个页面应该有“开源”、“企业版”、“高校版”等文字，在 CSS 中定义了这些文字应该以这个大小，这个颜色出现在页面中。</p><p><img src="https://youke1.picui.cn/s1/2025/08/12/689aad5952f25.png" alt="js实例"></p><p>而在这张图中，当点击右上角的 English 按钮后，整个页面切换成英文显示，这便是通过 JavaScript 来监听点击事件，实现了与浏览器之间的交互。</p><h2 id="计算机是如何识别-JavaScript-等高级语言的"><a href="#计算机是如何识别-JavaScript-等高级语言的" class="headerlink" title="计算机是如何识别 JavaScript 等高级语言的"></a>计算机是如何识别 JavaScript 等高级语言的</h2><p>众所周知，计算机只能识别一系列机器码，对于开发者来说，要用计算机可识别的机器码进行开发是十分困难的。于是，在此基础上，有了汇编语言。汇编语言是一种低级语言（亦称符号语言），用助记符代替机器指令的操作码，用地址符号或标号代替指令或操作数的地址。在不同的设备中，汇编语言对应着不同的机器语言指令集，通过<strong>汇编器</strong>转换成机器指令。</p><p>相对于机器语言，汇编语言的开发相对来说简单了一些，但依然复杂。于是，就有了一系列的高级语言，如 C++、Java、Python、JavaScript 等。每一种高级语言都有专门的<strong>工具</strong>将它们转换成机器可识别并执行的机器码，并按照开发者的意思给出结果。</p><ul><li><strong>Python</strong>：主要通过 <strong>解释器</strong>（如官方发行版自带的 <strong>CPython</strong>）将代码翻译并执行。</li><li><strong>Java</strong>：通过 <strong><code>javac</code> 编译器</strong>（JDK 提供）将源代码编译成字节码，再由 <strong>JVM（Java 虚拟机）</strong> 解释执行或即时编译为机器码。</li><li><strong>JavaScript</strong>：依赖<strong>引擎</strong>（如 Chrome 浏览器中的 <strong>V8 引擎</strong>）将代码转成机器码执行。</li></ul><p>需要注意的是，JavaScript 引擎只实现了 ECMAScript 语言规范，而像 DOM 操作、<code>window</code>、<code>document</code> 等是浏览器提供的 Web API，不属于 JavaScript 语言本身。JavaScript 诞生之初就是为了在浏览器中运行，因此这些 API 最初只存在于浏览器环境中。</p><h2 id="Node-js的诞生"><a href="#Node-js的诞生" class="headerlink" title="Node.js的诞生"></a>Node.js的诞生</h2><p>传统上，JavaScript 只能运行在浏览器环境中。当 Web 应用需要与后端服务器或数据库交互时，如果允许浏览器中的 JavaScript 直接访问系统资源，会带来严重的安全风险。因此，浏览器端与后端必须隔离，后端通常由其他语言编写。</p><p>Node.js 的出现改变了这一点——它基于 Chrome 的 V8 JavaScript 引擎构建，提供了一个独立于浏览器的 JavaScript 运行时环境。这样，开发者可以<strong>用 JavaScript 编写服务器端代码</strong>，运行在服务器上处理业务逻辑、访问数据库、操作文件等。前端（浏览器端）和后端（服务器端）都可以统一使用 JavaScript 进行开发，从而降低学习成本，并通过 API 接口实现安全的数据交互。</p><p>⚠️ 注意：Node.js 并不会让浏览器端的 JavaScript 获得访问本地文件系统的能力，它是一个单独运行的环境，通常在服务器或本地开发机上执行。</p><h2 id="Node-js的实际作用"><a href="#Node-js的实际作用" class="headerlink" title="Node.js的实际作用"></a>Node.js的实际作用</h2><p>JavaScript 代码一般有两种编写和运行方式：</p><ul><li><strong>在 HTML 文件中通过 <code>&lt;script&gt;</code> 标签</strong> 来定义交互行为：运行在浏览器中，能调用 Web API，但不能访问系统文件。</li><li><strong>通过 Node.js 在各种 IDE 或命令行中运行 <code>.js</code> 文件</strong>：Node.js 内置了 V8 引擎和自己的 API（如 <code>fs</code> 模块），可以访问文件系统和网络资源（权限范围内）。</li></ul><p>运行 JavaScript 文件的方式包括：</p><ul><li>在 IDE 中点击运行按钮</li><li>在命令行中执行：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node 文件名.js</span><br></pre></td></tr></tbody></table></figure><p>可以把 JavaScript 和 Node.js 的关系类比为：JavaScript 是“接待员”，Node.js 是“管理员兼仓库钥匙”，而操作系统中的数据文件是“仓库里的货物”。Node.js 内置了 V8 引擎，因此既能理解接待员的语言，又能带着权限去仓库取货。</p><p>如今，Node.js 在前端开发中几乎是必不可少的。它不仅是运行 JavaScript 的环境，还集成了大量开源工具和库，比如构建工具 <strong>webpack</strong>、静态博客工具 <strong>hexo</strong> 等。这些工具本质上都是用 JavaScript 编写的程序，可以通过 <strong>npm（Node Package Manager）</strong> 安装：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install 库名</span><br></pre></td></tr></tbody></table></figure><p>npm 是 Node.js 自带的包管理工具，用来安装、管理和发布 JavaScript 包（库）。</p><p>而安装一些命令行工具，如<strong>hexo,vue</strong>等，实际上就是在安装一系列JavaScript文件，并在安装的过程中注册这些命令。在执行某些命令，如hexo -g时,命令行工具会<strong>自动找到该命令对应的JavaScript</strong>文件并通过<strong>Node.js</strong>执行。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>从最初只存在于浏览器中的前端脚本，到如今在服务器端同样大放异彩，JavaScript 的舞台早已不再局限于网页。Node.js 不仅让 JavaScript 跨越了前后端的鸿沟，还推动了全栈开发模式的普及。无论是构建高性能的 API 服务，还是搭建个人博客、命令行工具，Node.js 都提供了稳定而强大的运行环境。理解 JavaScript 与 Node.js 的关系，不仅是学习前端开发的基础，更是迈向全栈开发的重要一步。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Node.js </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法:定长滑动窗口类型题目总结</title>
      <link href="/2025/07/29/ding-chang-hua-dong-chuang-kou-lei-xing-ti-mu-zong-jie/"/>
      <url>/2025/07/29/ding-chang-hua-dong-chuang-kou-lei-xing-ti-mu-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="定长滑动窗口介绍"><a href="#定长滑动窗口介绍" class="headerlink" title="定长滑动窗口介绍"></a>定长滑动窗口介绍</h1><p>定长滑动窗口指的是–在一定背景条件下，从列表当中找到连续k个元素，使得他们满足如：“这些元素的和最大”，“这些元素的和最小”等条件并将结果返回。将这些连续元素构成的子列表称作窗口。<br></p><p>一般来说，定长滑动窗口类型的题目在题干中会给出很明显的提示，比如：”一个大小为k的连续子串”，“可以保持连续minutes分钟不生气”。看到此类固定值出现在题目中，就应该考虑使用定长滑动窗口了。<br></p><h1 id="定长滑动窗口分类"><a href="#定长滑动窗口分类" class="headerlink" title="定长滑动窗口分类"></a>定长滑动窗口分类</h1><p>定长滑动窗口一般分为两类，第一类为统计类，第二类为计算类<br></p><ul><li>统计类:指的是需要统计子列表中某些类型元素的个数，找到拥有该类型元素个数最多或最少的子列表，记录值并返回。<br></li><li>计算类:指的是需要计算子列表当中的元素，找到当中元素和最大或者最小的子列表，记录值并返回。<br></li></ul><h1 id="定长滑动窗口的一般求解方法"><a href="#定长滑动窗口的一般求解方法" class="headerlink" title="定长滑动窗口的一般求解方法"></a>定长滑动窗口的一般求解方法</h1><p>这类题目的解法一般遵循三部曲</p><ul><li>创造窗口(入)</li><li>更新结果(算)</li><li>拆除窗口(出)</li></ul><p>正如前文所说，我们要找的是由一系列大小为k的连续元素构成的窗口，那么第二个窗口和第一个窗口实际上只有一个元素不同，即第一个窗口的最左边元素和第二个窗口的最右边元素。后面的窗口以此类推。<br></p><p>如果我们已知第一个窗口(由列表最开始的k个元素构成)的信息,比如:”第一个窗口内有多少个元音字母”,”第一个窗口的元素和是多少”。此时我们想要知道第二个窗口的信息，那么只需要判断第一个窗口最左边的元素是否也被纳入了计算或者统计当中，如果是，那么就用第一个窗口得到的值减去最左边元素对该值的贡献，再将第二个窗口最右边的值的贡献加入，即可得到第二个窗口的值。<br></p><p>这样的一个过程便是三部曲的体现。具体模板代码如下。<br></p><pre><code class="language-python">class Solution:    def funcname(self,nums:list[int],k:int) -&gt; int:        """        nums:为待处理的列表        k:为题目规定的窗口大小        """        ans = res = 0 #定义两个值，分别用来存放全局结果和局部结构        for i in range(len(nums)):            #1.构建窗口            ans += nums[i]            if i &lt; k - 1:                continue            #2.更新结果            res = max(res,ans)            #3.拆除窗口            ans -= nums[i - k + 1]        return res</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
